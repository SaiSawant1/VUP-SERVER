// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user_account (
  id, name, email, password
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, email, password, created_at, updated_at
`

type CreateUserParams struct {
	ID       pgtype.UUID
	Name     pgtype.Text
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserAccount, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :one
SELECT id, name, email, password, created_at, updated_at FROM user_account
`

func (q *Queries) GetAllUsers(ctx context.Context) (UserAccount, error) {
	row := q.db.QueryRow(ctx, getAllUsers)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
Select id, name, email, password, created_at, updated_at from user_account
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (UserAccount, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
